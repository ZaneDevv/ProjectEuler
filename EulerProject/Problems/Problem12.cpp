#include <iostream>
#include "./Colors/Colors.h"

/**
* Exercise 12: Highly Divisible Triangular Number
*
* The sequence of triangle numbers is generated by adding the natural numbers. So the 7th
* triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 
* 
* 1, 3, 6, 10, 15, 21, 28, 36, 45, 55....
* 
* Let us list the factors of the first seven triangle numbers:
* 
* 1: 1
* 3: 1, 3
* 6: 1, 2, 3, 6
* 10: 1, 2, 5, 10
* 15: 1, 3, 5, 15
* 21: 1, 3, 7, 21
* 28: 1, 2, 4, 7, 14, 28
* 
* We can see that 28 is the first triangle number to have over five divisors.
* What is the value of the first triangle number to have over five hundred divisors?
*
* 
* @file Problem12.cpp
* @date 25/10/17
* @author Álvaro Fernández Barrero
*/



/**
* @brief Computes the nth triangle number.
* @param The triangle number.
* @return The triangle number computed.
* @date 25/10/17
* @author Álvaro Fernández Barrero
*/
size_t nthTriangleNumber(uint64_t);



/**
* @brief Computes the amount of divisors the given number has.
* @param The number to check the divisors.
* @return The amount of divisors the given number has.
* @date 25/10/17
* @author Álvaro Fernández Barrero
*/
uint64_t getAmountOfDivisors(size_t);



int main12()
{
	// Defining variables

	const int TARGET_AMOUNT_OF_DIVISORS = 500;

	uint64_t amountOfDivisors = 2;
	size_t result = 0L;
	uint64_t n = 50;


	// Computing the first triangle number with 500 divisors

	do
	{
		n++;
		result = nthTriangleNumber(n);
		amountOfDivisors = getAmountOfDivisors(result);

	} while (amountOfDivisors <= TARGET_AMOUNT_OF_DIVISORS);


	// Printing the result

	std::cout << "The first triangle number to have at least " << RED << TARGET_AMOUNT_OF_DIVISORS << RESET_COLOR
		<< " divisors is " << BLUE << result << RESET_COLOR << ".";


	std::cin.get();
	return 0;
}



size_t nthTriangleNumber(uint64_t n)
{
	return (size_t)n * (n + 1) / 2;
}



uint64_t getAmountOfDivisors(size_t n)
{
	if (n <= 1)
	{
		return 1;
	}

	uint64_t amount = 0;

	for (size_t i = 1; i * i <= n; i++)
	{
		if (n % i != 0)
		{
			continue;
		}

		if (i * i == n)
		{
			amount++;
		}
		else
		{
			amount += 2;
		}
	}

	return amount;
}
